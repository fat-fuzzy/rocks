// Flex layout fallback
[class*='l:grid'] {
	display: flex;
	flex-wrap: wrap;
}

[class*='l:grid'] {
	display: grid;
	grid-gap: var(--gap);
}

// Basic grid that will automatically create columns if space is available for given column dimensions: between var(--current-side-size) and 100% of available width
@supports (width: min(var(--current-item-size), 100%)) {
	[class*='l:grid'] {
		grid-template-columns: repeat(auto-fill, minmax(min(var(--current-item-size), 100%), 1fr));
	}
}

[class*='l:grid'] > * {
	/* needed for the flex layout fallback */
	margin-bottom: var(--gap);
}

// Fix cell alignment in in end aligned grid
[class*=':grid'][class*=':end'] > :empty,
[class*=':grid'][class*=':end'] > :only-child {
	order: -1;
}

/* flex layout fallback */
[class*=':grid'][class*=':end'] {
	flex-direction: row-reverse;
}

/* We set the margins to 0 and use gap in grid */
@supports (display: grid) {
	[class*='l:grid'] > * {
		width: auto;
		margin: 0;
	}
}
