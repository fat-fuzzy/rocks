/* Flex layout fallback */
[class*='l:grid'] {
	display: flex;
	flex-wrap: wrap;
}

[class*='l:grid'] {
	display: grid;
	grid-gap: var(--grid-gap, var(--gap));
}

/* Basic grid that will automatically create columns if space is available for given column dimensions:
	- between var(--sidebar-width) and 100% of available width
	*/
@supports (width: min(var(--grid-item-size), 100%)) {
	[class*='l:grid'] {
		grid-template-columns: repeat(
			auto-fill,
			minmax(min(var(--grid-item-size), 100%), 1fr)
		);
	}
}

[class*='l:grid'] > * {
	/* needed for the flex layout fallback */
	margin-bottom: var(--grid-gap, var(--gap));
}

/* Fix cell alignment in in end aligned grid */
[class*=':grid'][class*=':end'] > :empty,
[class*=':grid'][class*=':end'] > :only-child {
	order: -1;
}

/* flex layout fallback */
[class*=':grid'][class*=':end'] {
	flex-direction: row-reverse;
}

/* We set the margins to 0 and use gap in grid */
@supports (display: grid) {
	[class*='l:grid'] > * {
		inline-size: auto;
		margin: 0;
		max-inline-size: 100%;
	}
}

[class='l:grid'].size\:2xs,
.l\:grid\:2xs {
	--grid-gap: var(--size-base-2xs);
	--grid-item-size: var(--layout-grid-item-2xs);
}

[class='l:grid'].size\:xs,
.l\:grid\:xs {
	--grid-gap: var(--size-base-xs);
	--grid-item-size: var(--layout-grid-item-xs);
}

[class='l:grid'].size\:sm,
.l\:grid\:sm {
	--grid-gap: var(--size-base-sm);
	--grid-item-size: var(--layout-grid-item-sm);
}

[class='l:grid'].size\:md,
.l\:grid\:md {
	--grid-gap: var(--size-base-md);
	--grid-item-size: var(--layout-grid-item-md);
}

[class='l:grid'].size\:lg,
.l\:grid\:lg {
	--grid-gap: var(--size-base-lg);
	--grid-item-size: var(--layout-grid-item-lg);
}

[class='l:grid'].size\:xl,
.l\:grid\:xl {
	--grid-gap: var(--size-base-xl);
	--grid-item-size: var(--layout-grid-item-xl);
}

[class='l:grid'].size\:2xl,
.l\:grid\:2xl {
	--grid-gap: var(--size-base-2xl);
	--grid-item-size: var(--layout-grid-item-2xl);
}
