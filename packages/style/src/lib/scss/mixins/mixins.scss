@use 'sass:map';
@use 'sass:color';
@use 'sass:math';

// == CSS VARS

/**
 * src https://dev.to/felipperegazio/css-custom-properties-vars-with-sass-scss-a-practical-architecture-strategy-1m88
 * Use this mixin to declare a set of CSS Custom Properties.
 * You can use this mixin to output different global designs ("themes") while relying on
 * common core CSS functionality to generate layout, typography, color, etc (using $design_tokens)
 * 
 *
 * Usage:
 * @include generate-css-vars((
 *  base-font-size: 65.5%,
 *  font-family: #{"HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif},
 * 
 *  primary-color: #33b5e5,
 *  outline-color: #ff500a,
 * ));
 *
 * Will result in
 *
 * html {
 *    --base-font-size: 65.5%,
 *    --font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif;
 *    --primary-color:  #33b5e5;
 *    --outline-color: #ff500a,
 * }
 *
 */

// $current_cssvars holds the CSS variables that have been generated so far. It is initially set to null
$current_cssvars: ();

@mixin generate-css-vars($design_tokens, $prefix) {
	$current_cssvars: map.merge($current_cssvars, $design_tokens);

	@each $name, $value in $design_tokens {
		#{$prefix}-#{$name}: #{$value};
	}
}

/**
* Attempting this (it works!):
* - https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
* - https://utopia.fyi/blog/clamp
* It can probably be improved with better usage of sass syntax
*/
@mixin generate-typographic-scale(
	$scale: $modular-scale,
	$f-slope: $f-slope,
	$f-size-min-0: $f-size-min-0,
	$f-size-max-0: $f-size-max-0,
	$fluid-0: $fluid-0,
	$steps-plus: $modular-scale-steps-plus,
	$steps-minus: $modular-scale-steps-minus
) {
	$slope: map.get($scale, 'slope');
	$previous-step: 0;
	$size-min-step: map.get($scale, 'size-min');
	$size-max-step: map.get($scale, 'size-max');
	$width-neg-step: map.get($scale, 'width-neg');
	$y-axis-step: map.get($scale, 'y-axis');

	@each $step in $steps-plus {
		$size-min-step: calc(#{$size-min-step} * var(--fluid-min-ratio));
		$size-max-step: calc(#{$size-min-step} * var(--fluid-max-ratio));
		$width-neg-step: calc(-1 * #{$size-min-step});
		$y-axis-step: calc(#{$width-neg-step} * #{$slope} + #{$size-min-step});

		--f-size-min-#{$step}: #{$size-min-step};
		--f-size-max-#{$step}: #{$size-max-step};
		--f-width-neg-#{$step}: #{$width-neg-step};
		--y-axis-#{$step}: #{$y-axis-step};
		--fluid-#{$step}: clamp(
			var(--f-size-min-#{$step}) * 1rem,
			var(--y-axis-#{$step}) * 1rem + #{$slope} * 100vw,
			var(--f-size-max-#{$step}) * 1rem
		);

		$previous-step: calc(#{$previous-step} + 1);
	}

	$previous-step: 0;
	$size-min-step: map.get($scale, 'size-min');
	$size-max-step: map.get($scale, 'size-max');
	$width-neg-step: map.get($scale, 'width-neg');
	$y-axis-step: map.get($scale, 'y-axis');

	@each $step in $steps-minus {
		$size-min-step: calc(#{$size-min-step} / var(--fluid-min-ratio));
		$size-max-step: calc(#{$size-min-step} / var(--fluid-max-ratio));
		$width-neg-step: calc(-1 * #{$size-min-step});
		$y-axis-step: calc(#{$width-neg-step} * #{$slope} + #{$size-min-step});

		--f-size-min-#{$step}: #{$size-min-step};
		--f-size-max-#{$step}: #{$size-max-step};
		--f-width-neg-#{$step}: #{$width-neg-step};
		--y-axis-#{$step}: #{$y-axis-step};
		--fluid-#{$step}: clamp(
			var(--f-size-min-#{$step}) * 1rem,
			var(--y-axis-#{$step}) * 1rem + #{$slope} * 100vw,
			var(--f-size-max-#{$step}) * 1rem
		);

		$previous-step: calc(#{$previous-step} - 1);
	}
}

@mixin theme-default(
	$f-slope,
	$f-size-min-0,
	$f-size-max-0,
	$fluid-0,
	$modular-scale,
	$modular-scale-steps-plus,
	$modular-scale-steps-minus,
	$prefix
) {
	html {
		// Generate Typographic variables
		@include generate-css-vars($modular-scale, $prefix);
		@include generate-typographic-scale(
			$modular-scale,
			$f-slope,
			$f-size-min-0,
			$f-size-max-0,
			$fluid-0,
			$modular-scale-steps-plus,
			$modular-scale-steps-minus
		);
	}
}
