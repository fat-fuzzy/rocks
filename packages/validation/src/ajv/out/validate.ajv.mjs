"use strict";export const FormValidationFunction = validate14;const schema32 = {"$id":"#/definitions/AjvValidator","$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"sample_name":{"$ref":"#/definitions/text"},"sample_phone":{"$ref":"#/definitions/phone"},"sample_email":{"$ref":"#/definitions/email"},"sample_password":{"$ref":"#/definitions/password"},"confirm_password":{"$ref":"#/definitions/confirm_password"},"sample_postcode":{"$ref":"#/definitions/postcode"},"sample_description":{"$ref":"#/definitions/textarea"},"sample_checkbox":{"$ref":"#/definitions/checkbox"},"sample_select":{"$ref":"#/definitions/select"},"sample_disabled_field":{"$ref":"#/definitions/disabled_field"},"sample_radio_group":{"$ref":"#/definitions/radio_group"},"sample_checkbox_group":{"$ref":"#/definitions/checkbox_group"}},"required":["sample_name","sample_email","sample_password"],"definitions":{"text":{"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":100,"errorMessage":"100 characters maximum"}]},"username":{"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":1000,"errorMessage":"1000 characters maximum"},{"type":"string","pattern":"^([\\W\\D\\S]{0}[\\.\\-]{0,1000}[\\w\\d]{0,1000}){3,1000}$","errorMessage":"Characters allowed: alphanumeric characters, hyphens (-), periods (.), underscores (_)"}]},"phone":{"type":"string","pattern":"[\\+0-9]{10,14}","errorMessage":"Please enter a valid phone number"},"email":{"type":"string","format":"email","errorMessage":{"format":"Please enter a valid email"}},"password":{"allOf":[{"type":"string","format":"password","minLength":12,"errorMessage":"12 characters minimum"},{"type":"string","format":"password","maxLength":1000,"errorMessage":"1000 characters maximum"},{"type":"string","format":"password","pattern":"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}","errorMessage":"3 special characters minimum"},{"type":"string","format":"password","pattern":"([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}","errorMessage":"3 digits minimum"}]},"confirm_password":{"type":"string","const":{"$data":"1/password"},"errorMessage":{"const":"Passwords do not match"}},"postcode":{"allOf":[{"type":"string","minLength":5,"errorMessage":"5 characters minimum"}]},"textarea":{"type":"string","maxLength":200,"errorMessage":{"maxLength":"200 characters minimum"}},"checkbox":{"type":"string","pattern":"on|true","errorMessage":{"minLength":"Please select at least 1 option"}},"select":{"type":"string"},"disabled_field":{"type":"string"},"radio_group":{"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please select an option"}},"checkbox_group":{"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please choose at least one option"}}}};const schema33 = {"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":100,"errorMessage":"100 characters maximum"}]};const schema34 = {"type":"string","pattern":"[\\+0-9]{10,14}","errorMessage":"Please enter a valid phone number"};const schema35 = {"type":"string","format":"email","errorMessage":{"format":"Please enter a valid email"}};const schema36 = {"allOf":[{"type":"string","format":"password","minLength":12,"errorMessage":"12 characters minimum"},{"type":"string","format":"password","maxLength":1000,"errorMessage":"1000 characters maximum"},{"type":"string","format":"password","pattern":"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}","errorMessage":"3 special characters minimum"},{"type":"string","format":"password","pattern":"([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}","errorMessage":"3 digits minimum"}]};const schema37 = {"type":"string","const":{"$data":"1/password"},"errorMessage":{"const":"Passwords do not match"}};const schema38 = {"allOf":[{"type":"string","minLength":5,"errorMessage":"5 characters minimum"}]};const schema39 = {"type":"string","maxLength":200,"errorMessage":{"maxLength":"200 characters minimum"}};const schema40 = {"type":"string","pattern":"on|true","errorMessage":{"minLength":"Please select at least 1 option"}};const schema41 = {"type":"string"};const schema42 = {"type":"string"};const schema43 = {"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please select an option"}};const schema44 = {"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please choose at least one option"}};const func2 = function(str){const len=str.length;let length=0;let pos=0;let value;while (pos<len){length++;value=str.charCodeAt(pos++);if(value>=0xd800&&value<=0xdbff&&pos<len){value=str.charCodeAt(pos);if((value & 0xfc00)===0xdc00) pos++;}} return length;};const func0 = function r(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(e.constructor!==t.constructor)return!1;var f,n,i;if(Array.isArray(e)){if((f=e.length)!=t.length)return!1;for(n=f;0!=n--;)if(!r(e[n],t[n]))return!1;return!0}if(e instanceof Map&&t instanceof Map){if(e.size!==t.size)return!1;for(n of e.entries())if(!t.has(n[0]))return!1;for(n of e.entries())if(!r(n[1],t.get(n[0])))return!1;return!0}if(e instanceof Set&&t instanceof Set){if(e.size!==t.size)return!1;for(n of e.entries())if(!t.has(n[0]))return!1;return!0}if(ArrayBuffer.isView(e)&&ArrayBuffer.isView(t)){if((f=e.length)!=t.length)return!1;for(n=f;0!=n--;)if(e[n]!==t[n])return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if((f=(i=Object.keys(e)).length)!==Object.keys(t).length)return!1;for(n=f;0!=n--;)if(!Object.prototype.hasOwnProperty.call(t,i[n]))return!1;for(n=f;0!=n--;){var o=i[n];if(!r(e[o],t[o]))return!1}return!0}return e!=e&&t!=t};const pattern0 = new RegExp("[\\+0-9]{10,14}", "u");const pattern1 = new RegExp("([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}", "u");const pattern2 = new RegExp("([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}", "u");const pattern3 = new RegExp("on|true", "u");const formats0 = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/AjvValidator" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.sample_name === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_name"},message:"must have required property '"+"sample_name"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.sample_email === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_email"},message:"must have required property '"+"sample_email"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.sample_password === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_password"},message:"must have required property '"+"sample_password"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.sample_name !== undefined){let data0 = data.sample_name;if(typeof data0 === "string"){if(func2(data0) < 3){const err3 = {instancePath:instancePath+"/sample_name",schemaPath:"#/definitions/text/allOf/0/minLength",keyword:"minLength",params:{limit: 3},message:"must NOT have fewer than 3 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/sample_name",schemaPath:"#/definitions/text/allOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(errors > 0){const emErrs0 = [];for(const err5 of vErrors){if(((((err5.keyword !== "errorMessage") && (!err5.emUsed)) && ((err5.instancePath === instancePath+"/sample_name") || ((err5.instancePath.indexOf(instancePath+"/sample_name") === 0) && (err5.instancePath[instancePath+"/sample_name".length] === "/")))) && (err5.schemaPath.indexOf("#/definitions/text/allOf/0") === 0)) && (err5.schemaPath["#/definitions/text/allOf/0".length] === "/")){emErrs0.push(err5);err5.emUsed = true;}}if(emErrs0.length){const err6 = {instancePath:instancePath+"/sample_name",schemaPath:"#/definitions/text/allOf/0/errorMessage",keyword:"errorMessage",params:{errors: emErrs0},message:"3 characters minimum"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}const emErrs1 = [];for(const err7 of vErrors){if(!err7.emUsed){emErrs1.push(err7);}}vErrors = emErrs1;errors = emErrs1.length;}if(typeof data0 === "string"){if(func2(data0) > 100){const err8 = {instancePath:instancePath+"/sample_name",schemaPath:"#/definitions/text/allOf/1/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}else {const err9 = {instancePath:instancePath+"/sample_name",schemaPath:"#/definitions/text/allOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if(errors > 0){const emErrs2 = [];for(const err10 of vErrors){if(((((err10.keyword !== "errorMessage") && (!err10.emUsed)) && ((err10.instancePath === instancePath+"/sample_name") || ((err10.instancePath.indexOf(instancePath+"/sample_name") === 0) && (err10.instancePath[instancePath+"/sample_name".length] === "/")))) && (err10.schemaPath.indexOf("#/definitions/text/allOf/1") === 0)) && (err10.schemaPath["#/definitions/text/allOf/1".length] === "/")){emErrs2.push(err10);err10.emUsed = true;}}if(emErrs2.length){const err11 = {instancePath:instancePath+"/sample_name",schemaPath:"#/definitions/text/allOf/1/errorMessage",keyword:"errorMessage",params:{errors: emErrs2},message:"100 characters maximum"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}const emErrs3 = [];for(const err12 of vErrors){if(!err12.emUsed){emErrs3.push(err12);}}vErrors = emErrs3;errors = emErrs3.length;}}if(data.sample_phone !== undefined){let data1 = data.sample_phone;if(typeof data1 === "string"){if(!pattern0.test(data1)){const err13 = {instancePath:instancePath+"/sample_phone",schemaPath:"#/definitions/phone/pattern",keyword:"pattern",params:{pattern: "[\\+0-9]{10,14}"},message:"must match pattern \""+"[\\+0-9]{10,14}"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}else {const err14 = {instancePath:instancePath+"/sample_phone",schemaPath:"#/definitions/phone/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}if(errors > 0){const emErrs4 = [];for(const err15 of vErrors){if(((((err15.keyword !== "errorMessage") && (!err15.emUsed)) && ((err15.instancePath === instancePath+"/sample_phone") || ((err15.instancePath.indexOf(instancePath+"/sample_phone") === 0) && (err15.instancePath[instancePath+"/sample_phone".length] === "/")))) && (err15.schemaPath.indexOf("#/definitions/phone") === 0)) && (err15.schemaPath["#/definitions/phone".length] === "/")){emErrs4.push(err15);err15.emUsed = true;}}if(emErrs4.length){const err16 = {instancePath:instancePath+"/sample_phone",schemaPath:"#/definitions/phone/errorMessage",keyword:"errorMessage",params:{errors: emErrs4},message:"Please enter a valid phone number"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}const emErrs5 = [];for(const err17 of vErrors){if(!err17.emUsed){emErrs5.push(err17);}}vErrors = emErrs5;errors = emErrs5.length;}}if(data.sample_email !== undefined){let data2 = data.sample_email;if(typeof data2 === "string"){if(!(formats0.test(data2))){const err18 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}else {const err19 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}if(errors > 0){const emErrors0 = {"format":[]};const templates0 = {};for(const err20 of vErrors){if((((((err20.keyword !== "errorMessage") && (!err20.emUsed)) && (err20.instancePath === instancePath+"/sample_email")) && (err20.keyword in emErrors0)) && (err20.schemaPath.indexOf("#/definitions/email") === 0)) && (/^\/[^\/]*$/.test(err20.schemaPath.slice(19)))){emErrors0[err20.keyword].push(err20);err20.emUsed = true;}}for(const key0 in emErrors0){if(emErrors0[key0].length){const err21 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/errorMessage",keyword:"errorMessage",params:{errors: emErrors0[key0]},message:key0 in templates0 ? templates0[key0]() : schema35.errorMessage[key0]};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}const emErrs6 = [];for(const err22 of vErrors){if(!err22.emUsed){emErrs6.push(err22);}}vErrors = emErrs6;errors = emErrs6.length;}}if(data.sample_password !== undefined){let data3 = data.sample_password;if(typeof data3 === "string"){if(func2(data3) < 12){const err23 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/minLength",keyword:"minLength",params:{limit: 12},message:"must NOT have fewer than 12 characters"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}else {const err24 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}if(errors > 0){const emErrs7 = [];for(const err25 of vErrors){if(((((err25.keyword !== "errorMessage") && (!err25.emUsed)) && ((err25.instancePath === instancePath+"/sample_password") || ((err25.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err25.instancePath[instancePath+"/sample_password".length] === "/")))) && (err25.schemaPath.indexOf("#/definitions/password/allOf/0") === 0)) && (err25.schemaPath["#/definitions/password/allOf/0".length] === "/")){emErrs7.push(err25);err25.emUsed = true;}}if(emErrs7.length){const err26 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/errorMessage",keyword:"errorMessage",params:{errors: emErrs7},message:"12 characters minimum"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}const emErrs8 = [];for(const err27 of vErrors){if(!err27.emUsed){emErrs8.push(err27);}}vErrors = emErrs8;errors = emErrs8.length;}if(typeof data3 === "string"){if(func2(data3) > 1000){const err28 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}else {const err29 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}if(errors > 0){const emErrs9 = [];for(const err30 of vErrors){if(((((err30.keyword !== "errorMessage") && (!err30.emUsed)) && ((err30.instancePath === instancePath+"/sample_password") || ((err30.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err30.instancePath[instancePath+"/sample_password".length] === "/")))) && (err30.schemaPath.indexOf("#/definitions/password/allOf/1") === 0)) && (err30.schemaPath["#/definitions/password/allOf/1".length] === "/")){emErrs9.push(err30);err30.emUsed = true;}}if(emErrs9.length){const err31 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/errorMessage",keyword:"errorMessage",params:{errors: emErrs9},message:"1000 characters maximum"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}const emErrs10 = [];for(const err32 of vErrors){if(!err32.emUsed){emErrs10.push(err32);}}vErrors = emErrs10;errors = emErrs10.length;}if(typeof data3 === "string"){if(!pattern1.test(data3)){const err33 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/pattern",keyword:"pattern",params:{pattern: "([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}"},message:"must match pattern \""+"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}else {const err34 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}if(errors > 0){const emErrs11 = [];for(const err35 of vErrors){if(((((err35.keyword !== "errorMessage") && (!err35.emUsed)) && ((err35.instancePath === instancePath+"/sample_password") || ((err35.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err35.instancePath[instancePath+"/sample_password".length] === "/")))) && (err35.schemaPath.indexOf("#/definitions/password/allOf/2") === 0)) && (err35.schemaPath["#/definitions/password/allOf/2".length] === "/")){emErrs11.push(err35);err35.emUsed = true;}}if(emErrs11.length){const err36 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/errorMessage",keyword:"errorMessage",params:{errors: emErrs11},message:"3 special characters minimum"};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}const emErrs12 = [];for(const err37 of vErrors){if(!err37.emUsed){emErrs12.push(err37);}}vErrors = emErrs12;errors = emErrs12.length;}if(typeof data3 === "string"){if(!pattern2.test(data3)){const err38 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/3/pattern",keyword:"pattern",params:{pattern: "([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}"},message:"must match pattern \""+"([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}else {const err39 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/3/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}if(errors > 0){const emErrs13 = [];for(const err40 of vErrors){if(((((err40.keyword !== "errorMessage") && (!err40.emUsed)) && ((err40.instancePath === instancePath+"/sample_password") || ((err40.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err40.instancePath[instancePath+"/sample_password".length] === "/")))) && (err40.schemaPath.indexOf("#/definitions/password/allOf/3") === 0)) && (err40.schemaPath["#/definitions/password/allOf/3".length] === "/")){emErrs13.push(err40);err40.emUsed = true;}}if(emErrs13.length){const err41 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/3/errorMessage",keyword:"errorMessage",params:{errors: emErrs13},message:"3 digits minimum"};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}const emErrs14 = [];for(const err42 of vErrors){if(!err42.emUsed){emErrs14.push(err42);}}vErrors = emErrs14;errors = emErrs14.length;}}if(data.confirm_password !== undefined){let data4 = data.confirm_password;if(typeof data4 !== "string"){const err43 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/definitions/confirm_password/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}const vSchema0 = data && data.password;if(vSchema0 !== undefined && (!func0(data4, vSchema0))){const err44 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/definitions/confirm_password/const",keyword:"const",params:{allowedValue: vSchema0},message:"must be equal to constant"};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}if(errors > 0){const emErrors1 = {"const":[]};const templates1 = {};for(const err45 of vErrors){if((((((err45.keyword !== "errorMessage") && (!err45.emUsed)) && (err45.instancePath === instancePath+"/confirm_password")) && (err45.keyword in emErrors1)) && (err45.schemaPath.indexOf("#/definitions/confirm_password") === 0)) && (/^\/[^\/]*$/.test(err45.schemaPath.slice(30)))){emErrors1[err45.keyword].push(err45);err45.emUsed = true;}}for(const key1 in emErrors1){if(emErrors1[key1].length){const err46 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/definitions/confirm_password/errorMessage",keyword:"errorMessage",params:{errors: emErrors1[key1]},message:key1 in templates1 ? templates1[key1]() : schema37.errorMessage[key1]};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}const emErrs15 = [];for(const err47 of vErrors){if(!err47.emUsed){emErrs15.push(err47);}}vErrors = emErrs15;errors = emErrs15.length;}}if(data.sample_postcode !== undefined){let data5 = data.sample_postcode;if(typeof data5 === "string"){if(func2(data5) < 5){const err48 = {instancePath:instancePath+"/sample_postcode",schemaPath:"#/definitions/postcode/allOf/0/minLength",keyword:"minLength",params:{limit: 5},message:"must NOT have fewer than 5 characters"};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}else {const err49 = {instancePath:instancePath+"/sample_postcode",schemaPath:"#/definitions/postcode/allOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}if(errors > 0){const emErrs16 = [];for(const err50 of vErrors){if(((((err50.keyword !== "errorMessage") && (!err50.emUsed)) && ((err50.instancePath === instancePath+"/sample_postcode") || ((err50.instancePath.indexOf(instancePath+"/sample_postcode") === 0) && (err50.instancePath[instancePath+"/sample_postcode".length] === "/")))) && (err50.schemaPath.indexOf("#/definitions/postcode/allOf/0") === 0)) && (err50.schemaPath["#/definitions/postcode/allOf/0".length] === "/")){emErrs16.push(err50);err50.emUsed = true;}}if(emErrs16.length){const err51 = {instancePath:instancePath+"/sample_postcode",schemaPath:"#/definitions/postcode/allOf/0/errorMessage",keyword:"errorMessage",params:{errors: emErrs16},message:"5 characters minimum"};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}const emErrs17 = [];for(const err52 of vErrors){if(!err52.emUsed){emErrs17.push(err52);}}vErrors = emErrs17;errors = emErrs17.length;}}if(data.sample_description !== undefined){let data6 = data.sample_description;if(typeof data6 === "string"){if(func2(data6) > 200){const err53 = {instancePath:instancePath+"/sample_description",schemaPath:"#/definitions/textarea/maxLength",keyword:"maxLength",params:{limit: 200},message:"must NOT have more than 200 characters"};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}else {const err54 = {instancePath:instancePath+"/sample_description",schemaPath:"#/definitions/textarea/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}if(errors > 0){const emErrors2 = {"maxLength":[]};const templates2 = {};for(const err55 of vErrors){if((((((err55.keyword !== "errorMessage") && (!err55.emUsed)) && (err55.instancePath === instancePath+"/sample_description")) && (err55.keyword in emErrors2)) && (err55.schemaPath.indexOf("#/definitions/textarea") === 0)) && (/^\/[^\/]*$/.test(err55.schemaPath.slice(22)))){emErrors2[err55.keyword].push(err55);err55.emUsed = true;}}for(const key2 in emErrors2){if(emErrors2[key2].length){const err56 = {instancePath:instancePath+"/sample_description",schemaPath:"#/definitions/textarea/errorMessage",keyword:"errorMessage",params:{errors: emErrors2[key2]},message:key2 in templates2 ? templates2[key2]() : schema39.errorMessage[key2]};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}const emErrs18 = [];for(const err57 of vErrors){if(!err57.emUsed){emErrs18.push(err57);}}vErrors = emErrs18;errors = emErrs18.length;}}if(data.sample_checkbox !== undefined){let data7 = data.sample_checkbox;if(typeof data7 === "string"){if(!pattern3.test(data7)){const err58 = {instancePath:instancePath+"/sample_checkbox",schemaPath:"#/definitions/checkbox/pattern",keyword:"pattern",params:{pattern: "on|true"},message:"must match pattern \""+"on|true"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}else {const err59 = {instancePath:instancePath+"/sample_checkbox",schemaPath:"#/definitions/checkbox/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}if(errors > 0){const emErrors3 = {"minLength":[]};const templates3 = {};for(const err60 of vErrors){if((((((err60.keyword !== "errorMessage") && (!err60.emUsed)) && (err60.instancePath === instancePath+"/sample_checkbox")) && (err60.keyword in emErrors3)) && (err60.schemaPath.indexOf("#/definitions/checkbox") === 0)) && (/^\/[^\/]*$/.test(err60.schemaPath.slice(22)))){emErrors3[err60.keyword].push(err60);err60.emUsed = true;}}for(const key3 in emErrors3){if(emErrors3[key3].length){const err61 = {instancePath:instancePath+"/sample_checkbox",schemaPath:"#/definitions/checkbox/errorMessage",keyword:"errorMessage",params:{errors: emErrors3[key3]},message:key3 in templates3 ? templates3[key3]() : schema40.errorMessage[key3]};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}const emErrs19 = [];for(const err62 of vErrors){if(!err62.emUsed){emErrs19.push(err62);}}vErrors = emErrs19;errors = emErrs19.length;}}if(data.sample_select !== undefined){if(typeof data.sample_select !== "string"){const err63 = {instancePath:instancePath+"/sample_select",schemaPath:"#/definitions/select/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}if(data.sample_disabled_field !== undefined){if(typeof data.sample_disabled_field !== "string"){const err64 = {instancePath:instancePath+"/sample_disabled_field",schemaPath:"#/definitions/disabled_field/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}if(data.sample_radio_group !== undefined){let data10 = data.sample_radio_group;if(typeof data10 === "string"){if(!pattern3.test(data10)){const err65 = {instancePath:instancePath+"/sample_radio_group",schemaPath:"#/definitions/radio_group/pattern",keyword:"pattern",params:{pattern: "on|true"},message:"must match pattern \""+"on|true"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}else {const err66 = {instancePath:instancePath+"/sample_radio_group",schemaPath:"#/definitions/radio_group/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}if(errors > 0){const emErrors4 = {"pattern":[]};const templates4 = {};for(const err67 of vErrors){if((((((err67.keyword !== "errorMessage") && (!err67.emUsed)) && (err67.instancePath === instancePath+"/sample_radio_group")) && (err67.keyword in emErrors4)) && (err67.schemaPath.indexOf("#/definitions/radio_group") === 0)) && (/^\/[^\/]*$/.test(err67.schemaPath.slice(25)))){emErrors4[err67.keyword].push(err67);err67.emUsed = true;}}for(const key4 in emErrors4){if(emErrors4[key4].length){const err68 = {instancePath:instancePath+"/sample_radio_group",schemaPath:"#/definitions/radio_group/errorMessage",keyword:"errorMessage",params:{errors: emErrors4[key4]},message:key4 in templates4 ? templates4[key4]() : schema43.errorMessage[key4]};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}const emErrs20 = [];for(const err69 of vErrors){if(!err69.emUsed){emErrs20.push(err69);}}vErrors = emErrs20;errors = emErrs20.length;}}if(data.sample_checkbox_group !== undefined){let data11 = data.sample_checkbox_group;if(typeof data11 === "string"){if(!pattern3.test(data11)){const err70 = {instancePath:instancePath+"/sample_checkbox_group",schemaPath:"#/definitions/checkbox_group/pattern",keyword:"pattern",params:{pattern: "on|true"},message:"must match pattern \""+"on|true"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}else {const err71 = {instancePath:instancePath+"/sample_checkbox_group",schemaPath:"#/definitions/checkbox_group/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}if(errors > 0){const emErrors5 = {"pattern":[]};const templates5 = {};for(const err72 of vErrors){if((((((err72.keyword !== "errorMessage") && (!err72.emUsed)) && (err72.instancePath === instancePath+"/sample_checkbox_group")) && (err72.keyword in emErrors5)) && (err72.schemaPath.indexOf("#/definitions/checkbox_group") === 0)) && (/^\/[^\/]*$/.test(err72.schemaPath.slice(28)))){emErrors5[err72.keyword].push(err72);err72.emUsed = true;}}for(const key5 in emErrors5){if(emErrors5[key5].length){const err73 = {instancePath:instancePath+"/sample_checkbox_group",schemaPath:"#/definitions/checkbox_group/errorMessage",keyword:"errorMessage",params:{errors: emErrors5[key5]},message:key5 in templates5 ? templates5[key5]() : schema44.errorMessage[key5]};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}}const emErrs21 = [];for(const err74 of vErrors){if(!err74.emUsed){emErrs21.push(err74);}}vErrors = emErrs21;errors = emErrs21.length;}}}else {const err75 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}validate14.errors = vErrors;return errors === 0;}export const SignUpValidationFunction = validate15;const schema45 = {"$id":"#/definitions/SignUpSchema","$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"sample_username":{"$ref":"#/definitions/username"},"sample_email":{"$ref":"#/definitions/email"},"sample_password":{"$ref":"#/definitions/password"},"confirm_password":{"type":"string","const":{"$data":"1/sample_password"},"errorMessage":{"const":"Passwords do not match"}}},"required":["sample_username","sample_email","sample_password"],"definitions":{"text":{"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":100,"errorMessage":"100 characters maximum"}]},"username":{"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":1000,"errorMessage":"1000 characters maximum"},{"type":"string","pattern":"^([\\W\\D\\S]{0}[\\.\\-]{0,1000}[\\w\\d]{0,1000}){3,1000}$","errorMessage":"Characters allowed: alphanumeric characters, hyphens (-), periods (.), underscores (_)"}]},"phone":{"type":"string","pattern":"[\\+0-9]{10,14}","errorMessage":"Please enter a valid phone number"},"email":{"type":"string","format":"email","errorMessage":{"format":"Please enter a valid email"}},"password":{"allOf":[{"type":"string","format":"password","minLength":12,"errorMessage":"12 characters minimum"},{"type":"string","format":"password","maxLength":1000,"errorMessage":"1000 characters maximum"},{"type":"string","format":"password","pattern":"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}","errorMessage":"3 special characters minimum"},{"type":"string","format":"password","pattern":"([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}","errorMessage":"3 digits minimum"}]},"confirm_password":{"type":"string","const":{"$data":"1/password"},"errorMessage":{"const":"Passwords do not match"}},"postcode":{"allOf":[{"type":"string","minLength":5,"errorMessage":"5 characters minimum"}]},"textarea":{"type":"string","maxLength":200,"errorMessage":{"maxLength":"200 characters minimum"}},"checkbox":{"type":"string","pattern":"on|true","errorMessage":{"minLength":"Please select at least 1 option"}},"select":{"type":"string"},"disabled_field":{"type":"string"},"radio_group":{"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please select an option"}},"checkbox_group":{"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please choose at least one option"}}}};const schema46 = {"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":1000,"errorMessage":"1000 characters maximum"},{"type":"string","pattern":"^([\\W\\D\\S]{0}[\\.\\-]{0,1000}[\\w\\d]{0,1000}){3,1000}$","errorMessage":"Characters allowed: alphanumeric characters, hyphens (-), periods (.), underscores (_)"}]};const pattern6 = new RegExp("^([\\W\\D\\S]{0}[\\.\\-]{0,1000}[\\w\\d]{0,1000}){3,1000}$", "u");function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/SignUpSchema" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.sample_username === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_username"},message:"must have required property '"+"sample_username"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.sample_email === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_email"},message:"must have required property '"+"sample_email"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.sample_password === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_password"},message:"must have required property '"+"sample_password"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.sample_username !== undefined){let data0 = data.sample_username;if(typeof data0 === "string"){if(func2(data0) < 3){const err3 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/0/minLength",keyword:"minLength",params:{limit: 3},message:"must NOT have fewer than 3 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(errors > 0){const emErrs0 = [];for(const err5 of vErrors){if(((((err5.keyword !== "errorMessage") && (!err5.emUsed)) && ((err5.instancePath === instancePath+"/sample_username") || ((err5.instancePath.indexOf(instancePath+"/sample_username") === 0) && (err5.instancePath[instancePath+"/sample_username".length] === "/")))) && (err5.schemaPath.indexOf("#/definitions/username/allOf/0") === 0)) && (err5.schemaPath["#/definitions/username/allOf/0".length] === "/")){emErrs0.push(err5);err5.emUsed = true;}}if(emErrs0.length){const err6 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/0/errorMessage",keyword:"errorMessage",params:{errors: emErrs0},message:"3 characters minimum"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}const emErrs1 = [];for(const err7 of vErrors){if(!err7.emUsed){emErrs1.push(err7);}}vErrors = emErrs1;errors = emErrs1.length;}if(typeof data0 === "string"){if(func2(data0) > 1000){const err8 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/1/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}else {const err9 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if(errors > 0){const emErrs2 = [];for(const err10 of vErrors){if(((((err10.keyword !== "errorMessage") && (!err10.emUsed)) && ((err10.instancePath === instancePath+"/sample_username") || ((err10.instancePath.indexOf(instancePath+"/sample_username") === 0) && (err10.instancePath[instancePath+"/sample_username".length] === "/")))) && (err10.schemaPath.indexOf("#/definitions/username/allOf/1") === 0)) && (err10.schemaPath["#/definitions/username/allOf/1".length] === "/")){emErrs2.push(err10);err10.emUsed = true;}}if(emErrs2.length){const err11 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/1/errorMessage",keyword:"errorMessage",params:{errors: emErrs2},message:"1000 characters maximum"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}const emErrs3 = [];for(const err12 of vErrors){if(!err12.emUsed){emErrs3.push(err12);}}vErrors = emErrs3;errors = emErrs3.length;}if(typeof data0 === "string"){if(!pattern6.test(data0)){const err13 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/2/pattern",keyword:"pattern",params:{pattern: "^([\\W\\D\\S]{0}[\\.\\-]{0,1000}[\\w\\d]{0,1000}){3,1000}$"},message:"must match pattern \""+"^([\\W\\D\\S]{0}[\\.\\-]{0,1000}[\\w\\d]{0,1000}){3,1000}$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}else {const err14 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}if(errors > 0){const emErrs4 = [];for(const err15 of vErrors){if(((((err15.keyword !== "errorMessage") && (!err15.emUsed)) && ((err15.instancePath === instancePath+"/sample_username") || ((err15.instancePath.indexOf(instancePath+"/sample_username") === 0) && (err15.instancePath[instancePath+"/sample_username".length] === "/")))) && (err15.schemaPath.indexOf("#/definitions/username/allOf/2") === 0)) && (err15.schemaPath["#/definitions/username/allOf/2".length] === "/")){emErrs4.push(err15);err15.emUsed = true;}}if(emErrs4.length){const err16 = {instancePath:instancePath+"/sample_username",schemaPath:"#/definitions/username/allOf/2/errorMessage",keyword:"errorMessage",params:{errors: emErrs4},message:"Characters allowed: alphanumeric characters, hyphens (-), periods (.), underscores (_)"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}const emErrs5 = [];for(const err17 of vErrors){if(!err17.emUsed){emErrs5.push(err17);}}vErrors = emErrs5;errors = emErrs5.length;}}if(data.sample_email !== undefined){let data1 = data.sample_email;if(typeof data1 === "string"){if(!(formats0.test(data1))){const err18 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}else {const err19 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}if(errors > 0){const emErrors0 = {"format":[]};const templates0 = {};for(const err20 of vErrors){if((((((err20.keyword !== "errorMessage") && (!err20.emUsed)) && (err20.instancePath === instancePath+"/sample_email")) && (err20.keyword in emErrors0)) && (err20.schemaPath.indexOf("#/definitions/email") === 0)) && (/^\/[^\/]*$/.test(err20.schemaPath.slice(19)))){emErrors0[err20.keyword].push(err20);err20.emUsed = true;}}for(const key0 in emErrors0){if(emErrors0[key0].length){const err21 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/errorMessage",keyword:"errorMessage",params:{errors: emErrors0[key0]},message:key0 in templates0 ? templates0[key0]() : schema35.errorMessage[key0]};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}const emErrs6 = [];for(const err22 of vErrors){if(!err22.emUsed){emErrs6.push(err22);}}vErrors = emErrs6;errors = emErrs6.length;}}if(data.sample_password !== undefined){let data2 = data.sample_password;if(typeof data2 === "string"){if(func2(data2) < 12){const err23 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/minLength",keyword:"minLength",params:{limit: 12},message:"must NOT have fewer than 12 characters"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}else {const err24 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}if(errors > 0){const emErrs7 = [];for(const err25 of vErrors){if(((((err25.keyword !== "errorMessage") && (!err25.emUsed)) && ((err25.instancePath === instancePath+"/sample_password") || ((err25.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err25.instancePath[instancePath+"/sample_password".length] === "/")))) && (err25.schemaPath.indexOf("#/definitions/password/allOf/0") === 0)) && (err25.schemaPath["#/definitions/password/allOf/0".length] === "/")){emErrs7.push(err25);err25.emUsed = true;}}if(emErrs7.length){const err26 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/errorMessage",keyword:"errorMessage",params:{errors: emErrs7},message:"12 characters minimum"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}const emErrs8 = [];for(const err27 of vErrors){if(!err27.emUsed){emErrs8.push(err27);}}vErrors = emErrs8;errors = emErrs8.length;}if(typeof data2 === "string"){if(func2(data2) > 1000){const err28 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}else {const err29 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}if(errors > 0){const emErrs9 = [];for(const err30 of vErrors){if(((((err30.keyword !== "errorMessage") && (!err30.emUsed)) && ((err30.instancePath === instancePath+"/sample_password") || ((err30.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err30.instancePath[instancePath+"/sample_password".length] === "/")))) && (err30.schemaPath.indexOf("#/definitions/password/allOf/1") === 0)) && (err30.schemaPath["#/definitions/password/allOf/1".length] === "/")){emErrs9.push(err30);err30.emUsed = true;}}if(emErrs9.length){const err31 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/errorMessage",keyword:"errorMessage",params:{errors: emErrs9},message:"1000 characters maximum"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}const emErrs10 = [];for(const err32 of vErrors){if(!err32.emUsed){emErrs10.push(err32);}}vErrors = emErrs10;errors = emErrs10.length;}if(typeof data2 === "string"){if(!pattern1.test(data2)){const err33 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/pattern",keyword:"pattern",params:{pattern: "([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}"},message:"must match pattern \""+"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,100}){3}"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}else {const err34 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}if(errors > 0){const emErrs11 = [];for(const err35 of vErrors){if(((((err35.keyword !== "errorMessage") && (!err35.emUsed)) && ((err35.instancePath === instancePath+"/sample_password") || ((err35.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err35.instancePath[instancePath+"/sample_password".length] === "/")))) && (err35.schemaPath.indexOf("#/definitions/password/allOf/2") === 0)) && (err35.schemaPath["#/definitions/password/allOf/2".length] === "/")){emErrs11.push(err35);err35.emUsed = true;}}if(emErrs11.length){const err36 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/errorMessage",keyword:"errorMessage",params:{errors: emErrs11},message:"3 special characters minimum"};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}const emErrs12 = [];for(const err37 of vErrors){if(!err37.emUsed){emErrs12.push(err37);}}vErrors = emErrs12;errors = emErrs12.length;}if(typeof data2 === "string"){if(!pattern2.test(data2)){const err38 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/3/pattern",keyword:"pattern",params:{pattern: "([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}"},message:"must match pattern \""+"([0-9]{1}[a-z|A-Z|0-9]{0,100}){3}"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}else {const err39 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/3/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}if(errors > 0){const emErrs13 = [];for(const err40 of vErrors){if(((((err40.keyword !== "errorMessage") && (!err40.emUsed)) && ((err40.instancePath === instancePath+"/sample_password") || ((err40.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err40.instancePath[instancePath+"/sample_password".length] === "/")))) && (err40.schemaPath.indexOf("#/definitions/password/allOf/3") === 0)) && (err40.schemaPath["#/definitions/password/allOf/3".length] === "/")){emErrs13.push(err40);err40.emUsed = true;}}if(emErrs13.length){const err41 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/3/errorMessage",keyword:"errorMessage",params:{errors: emErrs13},message:"3 digits minimum"};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}const emErrs14 = [];for(const err42 of vErrors){if(!err42.emUsed){emErrs14.push(err42);}}vErrors = emErrs14;errors = emErrs14.length;}}if(data.confirm_password !== undefined){let data3 = data.confirm_password;if(typeof data3 !== "string"){const err43 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/properties/confirm_password/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}const vSchema0 = data && data.sample_password;if(vSchema0 !== undefined && (!func0(data3, vSchema0))){const err44 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/properties/confirm_password/const",keyword:"const",params:{allowedValue: vSchema0},message:"must be equal to constant"};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}if(errors > 0){const emErrors1 = {"const":[]};const templates1 = {};for(const err45 of vErrors){if((((((err45.keyword !== "errorMessage") && (!err45.emUsed)) && (err45.instancePath === instancePath+"/confirm_password")) && (err45.keyword in emErrors1)) && (err45.schemaPath.indexOf("#/properties/confirm_password") === 0)) && (/^\/[^\/]*$/.test(err45.schemaPath.slice(29)))){emErrors1[err45.keyword].push(err45);err45.emUsed = true;}}for(const key1 in emErrors1){if(emErrors1[key1].length){const err46 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/properties/confirm_password/errorMessage",keyword:"errorMessage",params:{errors: emErrors1[key1]},message:key1 in templates1 ? templates1[key1]() : schema45.properties.confirm_password.errorMessage[key1]};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}const emErrs15 = [];for(const err47 of vErrors){if(!err47.emUsed){emErrs15.push(err47);}}vErrors = emErrs15;errors = emErrs15.length;}}}else {const err48 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}validate15.errors = vErrors;return errors === 0;}