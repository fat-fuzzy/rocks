"use strict";export const SignUpValidationFunction = validate14;const schema32 = {"$id":"#/definitions/SignUpValidator","$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"sample_email":{"$ref":"#/definitions/email"},"sample_password":{"$ref":"#/definitions/password"},"confirm_password":{"$ref":"#/definitions/confirm_password"}},"required":["sample_email","sample_password"],"definitions":{"text":{"allOf":[{"type":"string","minLength":3,"errorMessage":"3 characters minimum"},{"type":"string","maxLength":100,"errorMessage":"100 characters  maximum"}]},"phone":{"type":"string","pattern":"[\\+0-9]{10,14}","errorMessage":{"errorMessage":"Please enter a valid phone number","pattern":"Please enter a valid phone number"}},"email":{"type":"string","format":"email","errorMessage":{"format":"Please enter a valid email address"}},"password":{"allOf":[{"type":"string","format":"password","minLength":12,"errorMessage":"12 characters minimum"},{"type":"string","format":"password","pattern":"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,20}){3}","errorMessage":"Please use at least 3 special characters"},{"type":"string","format":"password","pattern":"([0-9]{1}[a-z|A-Z|0-9]{0,20}){3}","errorMessage":"Please use at least 3 digits"}]},"confirm_password":{"type":"string","const":{"$data":"1/sample_password"},"errorMessage":{"const":"Passwords do not match"}},"postcode":{"allOf":[{"type":"string","minLength":5,"errorMessage":"5 characters minimum"}]},"textarea":{"type":"string","maxLength":200,"errorMessage":{"maxLength":"200 characters minimum"}},"checkbox":{"type":"string","pattern":"on|true","errorMessage":{"minLength":"Please select at least 1 option"}},"select":{"type":"string"},"disabled_field":{"type":"string"},"radio_group":{"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please select an option"}},"checkbox_group":{"type":"string","pattern":"on|true","errorMessage":{"pattern":"Please choose at least one option"}}}};const schema33 = {"type":"string","format":"email","errorMessage":{"format":"Please enter a valid email address"}};const schema34 = {"allOf":[{"type":"string","format":"password","minLength":12,"errorMessage":"12 characters minimum"},{"type":"string","format":"password","pattern":"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,20}){3}","errorMessage":"Please use at least 3 special characters"},{"type":"string","format":"password","pattern":"([0-9]{1}[a-z|A-Z|0-9]{0,20}){3}","errorMessage":"Please use at least 3 digits"}]};const schema35 = {"type":"string","const":{"$data":"1/sample_password"},"errorMessage":{"const":"Passwords do not match"}};const formats0 = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;const func2 = function (str) {const len = str.length;let length = 0;let pos = 0;let value;while (pos < len) {length++;value = str.charCodeAt(pos++);if (value >= 0xd800 && value <= 0xdbff && pos < len) {value = str.charCodeAt(pos);if ((value & 0xfc00) === 0xdc00) pos++;}} return length;};const func0 =  function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }


    if ((a instanceof Map) && (b instanceof Map)) {
      if (a.size !== b.size) return false;
      for (i of a.entries())
        if (!b.has(i[0])) return false;
      for (i of a.entries())
        if (!equal(i[1], b.get(i[0]))) return false;
      return true;
    }

    if ((a instanceof Set) && (b instanceof Set)) {
      if (a.size !== b.size) return false;
      for (i of a.entries())
        if (!b.has(i[0])) return false;
      return true;
    }

    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (a[i] !== b[i]) return false;
      return true;
    }


    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];

      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a!==a && b!==b;
};
;const pattern0 = new RegExp("([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,20}){3}", "u");const pattern1 = new RegExp("([0-9]{1}[a-z|A-Z|0-9]{0,20}){3}", "u");function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/SignUpValidator" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.sample_email === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_email"},message:"must have required property '"+"sample_email"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.sample_password === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sample_password"},message:"must have required property '"+"sample_password"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.sample_email !== undefined){let data0 = data.sample_email;if(typeof data0 === "string"){if(!(formats0.test(data0))){const err2 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}else {const err3 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}if(errors > 0){const emErrors0 = {"format":[]};const templates0 = {};for(const err4 of vErrors){if((((((err4.keyword !== "errorMessage") && (!err4.emUsed)) && (err4.instancePath === instancePath+"/sample_email")) && (err4.keyword in emErrors0)) && (err4.schemaPath.indexOf("#/definitions/email") === 0)) && (/^\/[^\/]*$/.test(err4.schemaPath.slice(19)))){emErrors0[err4.keyword].push(err4);err4.emUsed = true;}}for(const key0 in emErrors0){if(emErrors0[key0].length){const err5 = {instancePath:instancePath+"/sample_email",schemaPath:"#/definitions/email/errorMessage",keyword:"errorMessage",params:{errors: emErrors0[key0]},message:key0 in templates0 ? templates0[key0]() : schema33.errorMessage[key0]};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}const emErrs0 = [];for(const err6 of vErrors){if(!err6.emUsed){emErrs0.push(err6);}}vErrors = emErrs0;errors = emErrs0.length;}}if(data.sample_password !== undefined){let data1 = data.sample_password;if(typeof data1 === "string"){if(func2(data1) < 12){const err7 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/minLength",keyword:"minLength",params:{limit: 12},message:"must NOT have fewer than 12 characters"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}else {const err8 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}if(errors > 0){const emErrs1 = [];for(const err9 of vErrors){if(((((err9.keyword !== "errorMessage") && (!err9.emUsed)) && ((err9.instancePath === instancePath+"/sample_password") || ((err9.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err9.instancePath[instancePath+"/sample_password".length] === "/")))) && (err9.schemaPath.indexOf("#/definitions/password/allOf/0") === 0)) && (err9.schemaPath["#/definitions/password/allOf/0".length] === "/")){emErrs1.push(err9);err9.emUsed = true;}}if(emErrs1.length){const err10 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/0/errorMessage",keyword:"errorMessage",params:{errors: emErrs1},message:"12 characters minimum"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}const emErrs2 = [];for(const err11 of vErrors){if(!err11.emUsed){emErrs2.push(err11);}}vErrors = emErrs2;errors = emErrs2.length;}if(typeof data1 === "string"){if(!pattern0.test(data1)){const err12 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/pattern",keyword:"pattern",params:{pattern: "([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,20}){3}"},message:"must match pattern \""+"([$\\-+!?*&%~_@#]{1}[a-z|A-Z|0-9]{0,20}){3}"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}else {const err13 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if(errors > 0){const emErrs3 = [];for(const err14 of vErrors){if(((((err14.keyword !== "errorMessage") && (!err14.emUsed)) && ((err14.instancePath === instancePath+"/sample_password") || ((err14.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err14.instancePath[instancePath+"/sample_password".length] === "/")))) && (err14.schemaPath.indexOf("#/definitions/password/allOf/1") === 0)) && (err14.schemaPath["#/definitions/password/allOf/1".length] === "/")){emErrs3.push(err14);err14.emUsed = true;}}if(emErrs3.length){const err15 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/1/errorMessage",keyword:"errorMessage",params:{errors: emErrs3},message:"Please use at least 3 special characters"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}const emErrs4 = [];for(const err16 of vErrors){if(!err16.emUsed){emErrs4.push(err16);}}vErrors = emErrs4;errors = emErrs4.length;}if(typeof data1 === "string"){if(!pattern1.test(data1)){const err17 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/pattern",keyword:"pattern",params:{pattern: "([0-9]{1}[a-z|A-Z|0-9]{0,20}){3}"},message:"must match pattern \""+"([0-9]{1}[a-z|A-Z|0-9]{0,20}){3}"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}else {const err18 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}if(errors > 0){const emErrs5 = [];for(const err19 of vErrors){if(((((err19.keyword !== "errorMessage") && (!err19.emUsed)) && ((err19.instancePath === instancePath+"/sample_password") || ((err19.instancePath.indexOf(instancePath+"/sample_password") === 0) && (err19.instancePath[instancePath+"/sample_password".length] === "/")))) && (err19.schemaPath.indexOf("#/definitions/password/allOf/2") === 0)) && (err19.schemaPath["#/definitions/password/allOf/2".length] === "/")){emErrs5.push(err19);err19.emUsed = true;}}if(emErrs5.length){const err20 = {instancePath:instancePath+"/sample_password",schemaPath:"#/definitions/password/allOf/2/errorMessage",keyword:"errorMessage",params:{errors: emErrs5},message:"Please use at least 3 digits"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}const emErrs6 = [];for(const err21 of vErrors){if(!err21.emUsed){emErrs6.push(err21);}}vErrors = emErrs6;errors = emErrs6.length;}}if(data.confirm_password !== undefined){let data2 = data.confirm_password;if(typeof data2 !== "string"){const err22 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/definitions/confirm_password/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}const vSchema0 = data && data.sample_password;if(vSchema0 !== undefined && (!func0(data2, vSchema0))){const err23 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/definitions/confirm_password/const",keyword:"const",params:{allowedValue: vSchema0},message:"must be equal to constant"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}if(errors > 0){const emErrors1 = {"const":[]};const templates1 = {};for(const err24 of vErrors){if((((((err24.keyword !== "errorMessage") && (!err24.emUsed)) && (err24.instancePath === instancePath+"/confirm_password")) && (err24.keyword in emErrors1)) && (err24.schemaPath.indexOf("#/definitions/confirm_password") === 0)) && (/^\/[^\/]*$/.test(err24.schemaPath.slice(30)))){emErrors1[err24.keyword].push(err24);err24.emUsed = true;}}for(const key1 in emErrors1){if(emErrors1[key1].length){const err25 = {instancePath:instancePath+"/confirm_password",schemaPath:"#/definitions/confirm_password/errorMessage",keyword:"errorMessage",params:{errors: emErrors1[key1]},message:key1 in templates1 ? templates1[key1]() : schema35.errorMessage[key1]};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}const emErrs7 = [];for(const err26 of vErrors){if(!err26.emUsed){emErrs7.push(err26);}}vErrors = emErrs7;errors = emErrs7.length;}}}else {const err27 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}validate14.errors = vErrors;return errors === 0;}